"""
This module was created at the request of someone who regularly had to schedule meetings 
between people in different offices across the globe. They needed to be able to quickly 
and accurately determine what shared working hours existed between the various offices. 
This module takes in information about each office (hours of operation, location) and 
outputs the shared hours of operation.
"""

def build_office(loc, utc, office_open, office_close, zulu):
    """
    Takes user generated information about the location, time zone, and working hours of
    an office location and returns that information in dictionary format. Called from the
    get_offices function.

    Attributes:
        loc: str, the location of the office
        utc: int, the time zone of the office
        office_open: int, when the office officially starts work for the day
        office_close: int, when the office officially ends work for the day
        zulu: list, the office hours at UTC+0

    Returns:
        a dictionary built from the user provided data
    """
    return {'loc': loc, 
            'utc': utc, 
            'open': office_open, 
            'close': office_close,
            'zulu': zulu}

def convert_zulu(utc, b_open, b_close):
    """
    Generates a list of all hours of operation and converts them to zulu time (UTC+0).
    Called by get_offices.

    Note: per company policy, no confrence calls could be scheduled for the first and
        last hours of opperation on a day, which is reflected in the range of hours
        returned by the function.

    Attributes:
        utc: int, the time zone of the office
        b_open: int, opening time of office in local time
        b_close: int, closing time of office in local time
    
    Returns:
        A list of the hours of opperation at UTC+0
    """
    return [z-utc for z in range(b_open-1, b_close)]

def get_offices(offices):
    """
    Takes the user data and creates a list of offices with information about their hours of
    opperation, location, time zone, and hours of opperation in UTC+0 time.
    Calls build_office and convert_zulu

    Attributes:
        offices: list, generated by the user has the city, time zone, and open/close times
    
    Returns:
        a list of dictionaries, one entry for each office
    """
    office_list = []
    for office in offices:
        if office[3] < office[2]:
            # got too many entries with 12 hour times, so this converts 12 to 24 hour clock
            office[3] += 12
        new_office = build_office(
            office[0], 
            office[1], 
            office[2], 
            office[3],
            convert_zulu(office[1], office[2], office[3]))
        office_list.append(new_office)
    return office_list

def check_across(hour, offices):
    """
    Checks to see whether a given hour is during the work day for all listed offices.
    Called by get_hours

    Attributes:
        hour: int, an hour of the business day
        offices: list, the list of offices

    Returns:
        boolean, True of the hour is a working hour for every office, false otherwise
    """
    for office in offices:
        if hour not in office['zulu']:
            return False
    return True

def get_hours(offices):
    """
    Updates every office location in the list of offices with the hours available for the
    meeting of everyone involved, listed in local time of that office, by creating a new
    key 'available' which is given a list of hours in which a meeting can be schefuled. if
    no times are available across all given locations, 'available' instead has a string
    informing the user that no times match up between all offices.
    Calls check_across

    Attributes:
        offices: list, the list of office locations
    
    Returns:
        offices: an updated list of dictionaries
    """
    for office in offices:
        office['available'] = [
            hour+office['utc'] for hour in office['zulu'] if check_across(hour, offices)
        ]
        if not office['available']:
            # added when 3+ office locations started being included to ensure that the
            # user understoof that times were not compatable across all offices
            office['available'] = "No overlapping times."
    return offices

if __name__ == "__main__":
    # A set of examples for how the module is used.
    # Note that get_hours must be called on a list of dictionaries created by get_offices
    sydney = ['sydney', 10, 6, 17]
    seattle = ['seattle', -8, 8, 5]
    dallas = ['dallas', -6, 8, 5]
    london = ['london', 0, 8, 17]

    my_offices = get_offices([seattle, dallas, london])
    final_offices = get_hours(my_offices)
    
    for office in final_offices:
        print(f"{office['loc']}: {office['available']}")
 